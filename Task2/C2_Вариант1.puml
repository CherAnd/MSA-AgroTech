@startuml вариант 1, Комплекс управления животноводством
left to right direction
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

' === Участники ===
Person(оператор, "Оператор", "Использует систему")
Person(животновод, "Животновод", "Использует систему")

' === Границы системы===
System_Boundary(платформа, "АгроПром Х - Цифровая платформа") {


    Container(kafka, "Брокер сообщений", "Apache Kafka", "Шина данных")
    System_Boundary(АСУП, "Комплекс управления животноводством") {
        Container(управление_фермами, "Сервис управления животноводством", Python, "Управление и агрегация данных с ферм")
        Container(веб_интерфейс, "Веб-интерфейс", "React", "Управление фермами")
        ContainerDb(storage, "База данных","PostgreSQL", "")

        System_Boundary(АСУТП, "Система управления фермой") {
            Container(датчики_питания, "Датчики уровня воды и кормов.", "Python", "Данные с датчиков")
            Container(датчики_качества_воды, "Датчики качества воды.", "Python", "Данные с датчиков")
            Container(поилки_кормилки, "Поилки и кормилки", "C++", "Управление питанием")
            Container(kafka_replica, "Брокер сообщений", "Apache Kafka", "реплика локальных топиков")
            Container(модуль_контроля_питания, "Сервис контроля питания", "Python")
            Container(модуль_контроля_воды, "Сервис анализа качества воды", "Python", "Анализ качества")
            Container(модуль_управления, "Сервис управления поилками и кормилками", "Python", "Управление")

            Container(веб_интерфейс_ферма, "Веб-интерфейс фермы", "React", "Управление фермой")
            Container(api_gateway, "API gateway", "")
            Container(камеры_на_фермах, "Камеры наблюдения на фермах", "", "Видеоизображение")
            Container(модуль_поведения, "Сервис анализа поведения животных", "C++", "Обработка видео")
            Container(модуль_поголовья, "Сервис подсчёта поголовья", "C++", "Обработка видео")
            Container(хранилище_видео, "Хранилище размеченных видео и фотоданных")
            Container(хранилище_сырого_видео, "Хранилище сырых видеоданных")

            Container(сервис_управления_пользователями, "Сервис управления пользователями")
            Container(сервис_логирования, "Сервис логирования данных")
            ContainerDb(farm_users_storage, "База пользователей и настроек","PostgreSQL", "")
            ContainerDb(farm_storage, "База исторических данных","PostgreSQL", "")


        }
    }

}

'' === Взаимосвязи ===
Rel(датчики_питания, kafka_replica, "Публикация данных", "MQTT->Kafka")
Rel(датчики_качества_воды, kafka_replica, "Публикация данных", "MQTT->Kafka")
Rel(модуль_контроля_воды, kafka_replica, "Сигналы о качестве воды", "Kafka")
Rel(kafka_replica, модуль_контроля_воды, "Данные по воде", "Kafka")
Rel(kafka_replica, модуль_контроля_питания, "Получение данных о питании", "Kafka")
Rel(kafka_replica, модуль_управления, "Сигналы на изменения работы поилками и кормилками", "Kafka")
Rel(модуль_контроля_питания, kafka_replica,  "Публикация заданий по кормлению", "Kafka")
Rel(модуль_управления, поилки_кормилки,  "Команды по управлению кормилками и поилками")

Rel(оператор, веб_интерфейс_ферма, "Использует")
Rel(веб_интерфейс_ферма, api_gateway, "Использует", "HTTP, Websockets")
Rel(веб_интерфейс_ферма, api_gateway, "Использует", "HTTP, Websockets")
Rel(веб_интерфейс_ферма, api_gateway, "Использует", "HTTP, Websockets")
Rel(веб_интерфейс_ферма, api_gateway, "Использует", "HTTP, Websockets")
Rel(веб_интерфейс_ферма, api_gateway, "Использует", "HTTP, Websockets")
Rel(веб_интерфейс_ферма, api_gateway, "Использует", "HTTP, Websockets")

Rel(api_gateway, модуль_управления, "Использует", "HTTP, Websockets")
Rel(api_gateway, модуль_контроля_питания, "Использует", "HTTP, Websockets")
Rel(api_gateway, модуль_поведения, "Использует", "HTTP, Websockets")
Rel(api_gateway, модуль_поголовья, "Использует", "HTTP, Websockets")
Rel(api_gateway, сервис_управления_пользователями, "Использует", "HTTP, Websockets")
Rel(api_gateway, сервис_логирования, "Использует", "HTTP, Websockets")

Rel(kafka_replica, сервис_логирования, "Данные для сохранения")
Rel(сервис_логирования, farm_storage, "Сохранение временных срезов")

Rel(животновод, веб_интерфейс, "Использует")
Rel(веб_интерфейс, управление_фермами, "Использует", "REST API")

Rel(камеры_на_фермах, модуль_поведения, "Потоковое видео")
Rel(камеры_на_фермах, модуль_поголовья, "Потоковое видео")
Rel(камеры_на_фермах, хранилище_сырого_видео, "Потоковое видео")
Rel(хранилище_сырого_видео, модуль_поголовья, "Требуемый фрагмент видео")
Rel(хранилище_сырого_видео, модуль_поведения, "Требуемый фрагмент видео")
Rel(модуль_поведения, kafka_replica, "Сигналы девиантного поведения")
Rel(модуль_поведения, хранилище_видео, "Обработанные данные")
Rel(модуль_поголовья, kafka_replica, "Данные о численности")

Rel(сервис_управления_пользователями, farm_users_storage, "")

Rel(управление_фермами, storage, "")

Rel(kafka, управление_фермами, "Получает отчёты", "Kafka Protocol")
Rel(управление_фермами, kafka, "Публикует задания на изменения режима питания", "Kafka Protocol")
Rel(kafka, kafka_replica, "Репликация")
Rel(kafka_replica, kafka, "Репликация")


@enduml